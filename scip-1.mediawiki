<pre>
  SCIP: 1
  Title: SCIP Purpose and Guidelines
  Status: Draft
  Type: Meta
  Author: Ari Ramdial <ari@starkcollective.com>
  Created: 2016-10-02
</pre>

==What is a SCIP?==

SCIP stands for Stark Collective Improvement Proposal. An SCIP is a design document providing information to the Stark Collective community, or describing a new feature for Stark Collective or its processes or environment. The SCIP should provide a concise technical specification of the feature and a rationale for the feature.  The SCIP author is responsible for building consensus within the community and documenting dissenting opinions.

==SCIP Rationale==

We intend SCIPs to be the primary mechanisms for proposing new features, for collecting community input on an issue and for documenting the design decisions that have gone into Stark Collective. Because the SCIPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.

For Stark Collective implementers, SCIPs are a convenient way to track the progress of their implementation. Ideally each implementation maintainer would list the SCIPs that they have implemented. This will give end users a convenient way to know the current status of a given implementation or library.

SCIPs are intend to replace the venerable etherpads which described the initial PoC (Proof of Concept) and strike a balance between ease of accessibility and trackablity.

==SCIP Types==

There are three kinds of SCIP:

* A Standard Track SCIP describes any change that affects most or all Stark Collective implementations, such as a change to [https://github.com/StarkCollective/Governance]. Furthermore Standard SCIPs can be broken down into the following categories.
** Governance - Once PoS has been established it is expected that PoS protocol will have a separate specification.
** Member Roles - Currently Member Role discussions are tracked in [https://chat.starkcollective.com/home].

* An Informational SCIP describes a Stark Collective design issue, or provides general guidelines or information to the Stark Collective community, but does not propose a new feature. Informational SCIPs do not necessarily represent Stark Collective community consensus or a recommendation, so users and implementors are free to ignore Informational SCIPs or follow their advice.
* A Meta SCIP describes a process surrounding Stark Collective or proposes a change to (or an event in) a process. Process SCIPs are like Standards Track SCIPs but apply to areas other than the Stark Collective protocol itself. They may propose an implementation, but not to Stark Collective's codebase; they often require community consensus; unlike Informational SCIPs, they are more than recommendations, and users are typically not free to ignore them. Examples include procedures, guidelines, changes to the decision-making process, and changes to the tools or environment used in Stark Collective development. Any meta-SCIP is also considered a Process SCIP.

==SCIP Work Flow==

The SCIP repository Collaborators change the SCIPs status. Please send all SCIP-related email to the SCIP Collaborators, which is listed under SCIP Editors below. Also see SCIP Editor Responsibilities & Workflow.

The SCIP process begins with a new idea for Stark Collective. It is highly recommended that a single SCIP contain a single key proposal or new idea. Small enhancements or patches that don't affect consensus often don't need a SCIP and can be injected into the Stark Collective development workflow with a patch submission to the corresponding Stark Collective issue tracker. The more focused the SCIP, the more successful it tends to be. The SCIP editor reserves the right to reject SCIP proposals if they appear too unfocused or too broad. If in doubt, split your SCIP into several well-focused ones.

Each SCIP must have a champion -- someone who writes the SCIP using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea. The SCIP champion (a.k.a. Author) should first attempt to ascertain whether the idea is SCIP-able. Posting to the  the [https://forum.Stark Collective.org/categories/protocol-and-client-discussion Protocol Discussion] forum or opening an [https://github.com/Stark Collective/SCIP/issues Issue] is the best way to go about this.

Vetting an idea publicly before going as far as writing a SCIP is meant to save the potential author time. Asking the Stark Collective community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the Internet does not always do the trick). It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where Stark Collective is used.

Once the champion has asked the Stark Collective community as to whether an idea has any chance of acceptance, a draft SCIP should be presented as a Pull Request. This gives the author a chance to flesh out the draft SCIP to make properly formatted, of high quality, and to address initial concerns about the proposal.

If the SCIP collaborators approves, the SCIP editor will assign the SCIP a number, label it as Standards Track, Informational, or Process, give it status "Draft", and add it to the git repository. The SCIP editor will not unreasonably deny an SCIP. Reasons for denying SCIP status include duplication of effort, being technically unsound, not providing proper motivation or addressing backwards compatibility, or not in keeping with the Stark Collective philosophy.

The SCIP author may update the Draft as necessary in the git repository. Updates to drafts may also be submitted by the author as pull requests.

Standards Track SCIPs consist of three parts, a design document, implementation and finally if warranted an update to the [https://github.com/Stark Collective/yellowpaper formal specification]. The SCIP should be reviewed and accepted before an implementation is begun, unless an implementation will aid people in studying the SCIP. Standards Track SCIPs must be implemented in at least two viable Stark Collective clients before it can be considered Final.

SCIP authors are responsible for collecting community feedback on a SCIP before submitting it for review. However, wherever possible, long open-ended discussions should be avoided. Strategies to keep the discussions efficient include: having the SCIP author accept private comments in the early design phases, setting up a wiki page or git repository, etc. SCIP authors should use their discretion here.

For a SCIP to be accepted it must meet certain minimum criteria. It must be a clear and complete description of the proposed enhancement. The enhancement must represent a net improvement. The proposed implementation, if applicable, must be solid and must not complicate the protocol unduly.

Once a SCIP has been accepted, the implementations must be completed. When the implementation is complete in at least two viable clients and accepted by the community, the status will be changed to "Final". An update to the [https://github.com/Stark Collective/yellowpaper formal specification] should accompany the "Final" status change.

A SCIP can also be assigned status "Deferred". The SCIP author or editor can assign the SCIP this status when no progress is being made on the SCIP. Once a SCIP is deferred, the SCIP editor can re-assign it to draft status.

A SCIP can also be "Rejected". Perhaps after all is said and done it was not a good idea. It is still important to have a record of this fact.

SCIPs can also be superseded by a different SCIP, rendering the original obsolete. This is intended for Informational SCIPs, where version 2 of an API can replace version 1.

The possible paths of the status of SCIPs are as follows:

<img src=./SCIP-1/process.png>

Some Informational and Process SCIPs may also have a status of "Active" if they are never meant to be completed. E.g. SCIP 1 (this SCIP).

==What belongs in a successful SCIP?==

Each SCIP should have the following parts:

* Preamble -- RFC 822 style headers containing metadata about the SCIP, including the SCIP number, a short descriptive title (limited to a maximum of 44 characters), the names, and optionally the contact info for each author, etc.

* Abstract -- a short (~200 word) description of the technical issue being addressed.

* Specification -- The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current Stark Collective platforms (cpp-Stark Collective, go-Stark Collective, Stark Collectivej, Stark Collectivejs).

* Motivation -- The motivation is critical for SCIPs that want to change the Stark Collective protocol. It should clearly explain why the existing protocol specification is inadequate to address the problem that the SCIP solves. SCIP submissions without sufficient motivation may be rejected outright.

* Rationale -- The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages.

* The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.

* Backwards Compatibility -- All SCIPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The SCIP must explain how the author proposes to deal with these incompatibilities. SCIP submissions without a sufficient backwards compatibility treatise may be rejected outright.

* Implementations -- The implementations must be completed before any SCIP is given status "Final", but it need not be completed before the SCIP is accepted. It is better to finish the specification and rationale first and reach consensus on it before writing code.

==SCIP Formats and Templates==

SCIPs should be written in mediawiki or markdown format. Image files should be included in a subdirectory for that SCIP.

==SCIP Header Preamble==

Each SCIP must begin with an RFC 822 style header preamble. The headers must appear in the following order. Headers marked with "*" are optional and are described below. All other headers are required.

<pre>
  SCIP: <SCIP number>
  Title: <SCIP title>
  Author: <list of authors' real names and optionally, email address>
* Discussions-To: <email address>
  Status: <Draft | Active | Accepted | Deferred | Rejected |
           Withdrawn | Final | Superseded>
  Type: <Standards Track | Informational | Process>
  Created: <date created on, in ISO 8601 (yyyy-mm-dd) format>
* Replaces: <SCIP number>
* Superseded-By: <SCIP number>
* Resolution: <url>
</pre>

The Author header lists the names, and optionally the email addresses of all the authors/owners of the SCIP. The format of the Author header value must be

  Random J. User <address@dom.ain>

if the email address is included, and just

  Random J. User

if the address is not given.

If there are multiple authors, each should be on a separate line following RFC 2822 continuation line conventions.

Note: The Resolution header is required for Standards Track SCIPs only. It contains a URL that should point to an email message or other web resource where the pronouncement about the SCIP is made.

While a SCIP is in private discussions (usually during the initial Draft phase), a Discussions-To header will indicate the mailing list or URL where the SCIP is being discussed. No Discussions-To header is necessary if the SCIP is being discussed privately with the author.

The Type header specifies the type of SCIP: Standards Track, Informational, or Process.

The Created header records the date that the SCIP was assigned a number. Both headers should be in yyyy-mm-dd format, e.g. 2001-08-14.

SCIPs may have a Requires header, indicating the SCIP numbers that this SCIP depends on.

SCIPs may also have a Superseded-By header indicating that a SCIP has been rendered obsolete by a later document; the value is the number of the SCIP that replaces the current document. The newer SCIP must have a Replaces header containing the number of the SCIP that it rendered obsolete.

==Auxiliary Files==

SCIPs may include auxiliary files such as diagrams. Such files must be named SCIP-XXXX-Y.ext, where "XXXX" is the SCIP number, "Y" is a serial number (starting at 1), and "ext" is replaced by the actual file extension (e.g. "png").

==Transferring SCIP Ownership==

It occasionally becomes necessary to transfer ownership of SCIPs to a new champion. In general, we'd like to retain the original author as a co-author of the transferred SCIP, but that's really up to the original author. A good reason to transfer ownership is because the original author no longer has the time or interest in updating it or following through with the SCIP process, or has fallen off the face of the 'net (i.e. is unreachable or not responding to email). A bad reason to transfer ownership is because you don't agree with the direction of the SCIP. We try to build consensus around a SCIP, but if that's not possible, you can always submit a competing SCIP.

If you are interested in assuming ownership of a SCIP, send a message asking to take over, addressed to both the original author and the SCIP editor. If the original author doesn't respond to email in a timely manner, the SCIP editor will make a unilateral decision (it's not like such decisions can't be reversed :).

==SCIP Editors==

The current SCIP editors are
  * Ari Ramdial
  * Miqdad Amirali

==SCIP Editor Responsibilities & Workflow==

For each new SCIP that comes in, an editor does the following:

* Read the SCIP to check if it is ready: sound and complete. The ideas must make technical sense, even if they don't seem likely to be accepted.
* The title should accurately describe the content.
* Edit the SCIP for language (spelling, grammar, sentence structure, etc.), markup (for reST EWIPs), code style

If the SCIP isn't ready, the editor will send it back to the author for revision, with specific instructions.

Once the SCIP is ready for the repository, the SCIP editor will:

* Assign a SCIP number (almost always just the next available number)

* Accept the corresponding pull request

* List the SCIP in [[README.mediawiki]]

* Send email back to the SCIP author with next step.

Many SCIPs are written and maintained by developers with write access to the Stark Collective codebase. The SCIP editors monitor SCIP changes, and correct any structure, grammar, spelling, or markup mistakes we see.

The editors don't pass judgment on SCIPs. We merely do the administrative & editorial part. Except for times like this, there's relatively low volume.

==History==

This document was derived heavily from [https://github.com/ethereum/EIPs] which in turn was derived  from [https://github.com/bitcoin/bips Bitcoin's BIP-0001] written by Amir Taaki which in turn was derived from [https://www.python.org/dev/peps/ Python's PEP-0001]. In many places text was simply copied and modified. Although the PEP-0001 text was written by Barry Warsaw, Jeremy Hylton, and David Goodger, they are not responsible for its use in the Stark Collective Improvement Process, and should not be bothered with technical questions specific to Stark Collective or the SCIP. Please direct all comments to the SCIP editors.
